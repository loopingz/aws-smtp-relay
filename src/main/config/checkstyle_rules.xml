<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<!--
    Checkstyle-Configuration: Seniors Concessions CheckStyle
    Description: none
-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <module name="FileLength"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\S\s\s"/>
        <property name="message" value="Line has multiple consecutive non-indenting spaces."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="^(  ){0,6} [^ *]"/>
        <property name="message" value="Odd number of indenting spaces"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\.getBytes\(\)"/>
        <property name="message" value="Use 'getBytes(charset)' instead"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="AssertJUnit"/>
        <property name="message" value="Use standard TestNG Assert instead"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="Charset\.forName.*[Uu][Tt][Ff]-8"/>
        <property name="message" value="Use 'StandardCharsets.UTF_8' instead"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\.equals\(&quot;"/>
        <property name="message" value="Put string literals first in equality comparisons"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="=\s*RequestMethod\.GET\s*\)"/>
        <property name="message" value="HEAD requests should be allowed along with GET"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="(?&lt;=\n)\n\n"/>
        <property name="message" value="Multiple consecutive blank lines"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="(?&lt;=\n)\n[ \t]+\}"/>
        <property name="message" value="Blank line before indented closing brace"/>
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="@Transactional\n*\s*private"/>
        <property name="message" value="@Transactional cannot be applied to private method"/>
    </module>
    <module name="TreeWalker">
        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="MethodLength"/>
        <module name="ParameterNumber">
            <property name="severity" value="warning"/>
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="Indentation">
            <property name="severity" value="warning"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
        </module>
        <module name="EmptyLineSeparator">
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly"/>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!-- This would prevent us from naming constructor parameters after fields -->
        <!--<module name="HiddenField"/>-->
        <module name="IllegalCatch">
            <property name="severity" value="warning"/>
        </module>
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="severity" value="warning"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="TodoComment"/>
        <module name="UpperEll"/>
        <module name="SuperFinalize"/>
        <module name="SuperClone"/>
        <module name="StringLiteralEquality"/>
        <module name="MultipleVariableDeclarations"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${config.directory}/suppressions.xml"/>
    </module>

</module>
